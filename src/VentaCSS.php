<?php

declare(strict_types=1);
namespace Kenjiefx\VentaCSS;
use Kenjiefx\ScratchPHP\App\Components\ComponentModel;
use Kenjiefx\ScratchPHP\App\Interfaces\ExtensionsInterface;
use Kenjiefx\VentaCSS\Groupings\GroupedUtilityClassCompiler;
use Kenjiefx\VentaCSS\Registries\ClassRegistry;
use Kenjiefx\VentaCSS\Utilities\UtilityClassCompiler;
use Kenjiefx\VentaCSS\VentaConfig;
use Kenjiefx\VentaCSS\Services\AssetsManager;
use Kenjiefx\VentaCSS\Services\ClassNameMinifier;
use Kenjiefx\VentaCSS\Services\MediaQueryManager;
use Kenjiefx\VentaCSS\Factories\VentaConfigFactory;
use Kenjiefx\VentaCSS\Services\GroupedAssetsManager;
use Kenjiefx\VentaCSS\Services\ThemeCustomAssetsManager;


class VentaCSS implements ExtensionsInterface {

    /**
     * The HTML document before VentaCSS processes were completed
     */
    private string $preprocessed_html = '';

    /**
     * The HTML document after VentaCSS processes were completed
     */
    private string $PostProcessedHTML = '';

    /**
     * All Utility classes generated by the AssetsManager object
     */
    private array $ListOfUtilityClasses = [];

    /**
     * All Utility classes that were being used, already minified
     */
    private array $UsedUtilityClasses = [];

    /**
     * All media breakpoints and their Utility classes generated 
     * and listed by the MediaQueryManager object
     */
    private array $ListOfMediaQueryBreakPoints = [];

    /**
     * All media breakpoints and their Utility Classes being used
     */
    private array $UsedMediaQueryBreakpoints = [];

    private static bool $hasLoaded;


    private VentaConfig $VentaConfig;


    public function __construct(
        private VentaConfigFactory $VentaConfigFactory,
        private ClassRegistry $ClassRegistry,
        private GroupedUtilityClassCompiler $GroupedUtilityClassCompiler,
        private UtilityClassCompiler $UtilityClassCompiler,


        //private AssetsManager $AssetsManager,
        // private ThemeCustomAssetsManager $ThemeCustomAssetsManager,
        // private GroupedAssetsManager $GroupedAssetsManager,
        // private ClassNameMinifier $ClassNameMinifier,
        // private MediaQueryManager $MediaQueryManager
        )
    {
        $this->VentaConfig = VentaConfigFactory::create();
    }

    /**
     * This method is part of the Scratch ExtensionsInterface
     * @see ExtensionsInterface::mutatePageHTML for definition
     */
    public function mutatePageHTML(string $page_html): string
    {
        $this->preprocessed_html = $page_html;
        $this->run_extension();
        return $this->getProcessedPageHTML();
    }

    /**
     * This method is part of the Scratch ExtensionsInterface
     * @see ExtensionsInterface::mutatePageCSS for definition
     */
    public function mutatePageCSS(string $pageCSS): string
    {
        $mutatedCSS = $pageCSS.$this->getProcessedPageCSS();
        return str_replace(["\r","\n","    ","\t"],"", $mutatedCSS);
    }

    /**
     * This method is part of the Scratch ExtensionsInterface
     * @see ExtensionsInterface::mutatePageJS for definition
     */
    public function mutatePageJS(string $pageJS):string {
        return $pageJS;
    }

    /**
     * This method is part of the Scratch ExtensionsInterface
     * @see ExtensionsInterface::onCreateComponentContent for definition
     */
    public function onCreateComponentContent(ComponentModel $componentModel, string $content):string {
        return $content;
    }
    
    /**
     * This method is part of the Scratch ExtensionsInterface
     * @see ExtensionsInterface::onCreateComponentCSS for definition
     */
    public function onCreateComponentCSS(ComponentModel $componentModel, string $css): string {
        return $css;
    }

    /**
     * This method is part of the Scratch ExtensionsInterface
     * @see ExtensionsInterface::onCreateComponentJS for definition
     */
    public function onCreateComponentJS(ComponentModel $componentModel, string $js): string {
        return $js;
    }

    public function run_extension()
    {
        $this->ClassRegistry->register($this->preprocessed_html);
        $this->GroupedUtilityClassCompiler->compile();
        $this->UtilityClassCompiler->compile();
        // $this->compileCustomUtilityClasses();
        // $this->compileMediaQueryBreakpoints();
        // $this->generatePostProcessHTML();
    }

    private function compileUtilityClasses()
    {
        foreach ($this->AssetsManager->compileAssets() as $selector => $rules) {

            $this->ListOfUtilityClasses[$selector] = $rules;

            $minifiedClassName = $this->ClassNameMinifier->create();

            foreach ($this->ClassRegistry as $classStatement => $classDetails) {
                
                if (in_array($selector,$classDetails['classList'])) {
                    
                    $newArr = [];
                    foreach ($classDetails['minifiedClassNames'] as $unMinifiedClassName) {
                        if ($unMinifiedClassName===$selector) {
                            array_push($newArr,$minifiedClassName);
                        } else {
                            array_push($newArr,$unMinifiedClassName);
                        }
                    }
                    $this->ClassRegistry[$classStatement]['minifiedClassNames'] = $newArr;
                    $this->UsedUtilityClasses[$minifiedClassName] = $rules;
                }
            }
        }
 
    }

    private function compileCustomUtilityClasses() 
    {
        foreach ($this->ThemeCustomAssetsManager->loadCustomAssets() as $selector => $options) {
            $rules = $options['rules'];
            $this->ListOfUtilityClasses[$selector] = $rules;
            $minifiedClassName = $this->ClassNameMinifier->create();
            foreach ($this->ClassRegistry as $classStatement => $classDetails) {
                if (in_array($selector,$classDetails['classList'])) {
                    $newArr = [];
                    foreach ($classDetails['minifiedClassNames'] as $unMinifiedClassName) {
                        if ($unMinifiedClassName===$selector) {
                            array_push($newArr,$minifiedClassName);
                        } else {
                            array_push($newArr,$unMinifiedClassName);
                        }
                    }
                    $this->ClassRegistry[$classStatement]['minifiedClassNames'] = $newArr;
                    $this->UsedUtilityClasses[$minifiedClassName] = $rules;
                }
            }
        }
    }

    private function compileMediaQueryBreakpoints()
    {
        foreach ($this->MediaQueryManager->compileAssets() as $widthQueryClause => $mediaQueryAsset) {
            foreach ($mediaQueryAsset['selector_list'] as $selectorName => $selectorValue) {
                $minifiedClassName = $this->ClassNameMinifier->create();
                foreach ($this->ClassRegistry as $classStatement => $classDetails) {
                    if (in_array($selectorName,$classDetails['classList'])) {
                        $newArr = [];
                        foreach ($classDetails['minifiedClassNames'] as $unMinifiedClassName) {
                            if ($unMinifiedClassName===$selectorName) {
                                array_push($newArr,$minifiedClassName);
                            } else {
                                array_push($newArr,$unMinifiedClassName);
                            }
                        }
                        $this->ClassRegistry[$classStatement]['minifiedClassNames'] = $newArr;
                        if (!isset($this->UsedMediaQueryBreakpoints[$widthQueryClause])) {
                            $this->UsedMediaQueryBreakpoints[$widthQueryClause] = [];
                        }
                        $this->UsedMediaQueryBreakpoints[$widthQueryClause][$minifiedClassName] = $selectorValue;
                    }
                }
            }
        }
    }

    public function getProcessedPageCSS(): string
    {
        return $this->stringifyAllUsedCSS();
    }

    private function stringifyAllUsedCSS()
    {
        $css = '';
        foreach ($this->UsedUtilityClasses as $selector => $rules) {
            $css .= '.'.$selector.'{'.$rules.'}';
        }
        foreach ($this->UsedMediaQueryBreakpoints as $breakpoint => $listOfRules) {
            $css .= '@media screen and ('.$breakpoint.'px){';
                foreach ($listOfRules as $selector => $rules) {
                    $css .= '.'.$selector.'{'.$rules.'}';
                }
            $css .= '}';
        }
        $this->UsedUtilityClasses = [];
        $this->UsedMediaQueryBreakpoints = [];
        //$this->ClassRegistry = [];
        return $css;
    }

    private function generatePostProcessHTML()
    {

        $this->PostProcessedHTML = $this->PreProcessedHTML;

        foreach ($this->ClassRegistry as $classStatement => $classDetails) {

            $classAttributeMinified = 'class="'.implode(' ',$classDetails['minifiedClassNames']).'"';

            $this->PostProcessedHTML = str_replace($classStatement,$classAttributeMinified,$this->PostProcessedHTML);

        }
    }

    public function getProcessedPageHTML(): string
    {
        return $this->PostProcessedHTML;
    }

    public function getDashboard()
    {
        ob_start();
        include __dir__.'/Dashboard/dashboard.php';
        $dashboard = ob_get_contents();
        ob_end_clean();
        return $dashboard;
    }

    public function setRawPageCSS(string $rawPageCSS) {
        return '';
    }

}
